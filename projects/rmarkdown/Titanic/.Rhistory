knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(flexdashboard)
library(gtrendsR)
library(dygraphs)
library(xts)
library(dplyr)
library(magrittr)
library(lubridate)
# dados google trend
dengue <- gtrends(c("Dengue"), geo = "BR", time = "all")
# dados dengue datasus
datasus <- read.csv2("dengue_datasus.csv", skip = 3) %>% as_tibble()
dados <- subset(dengue$interest_over_time, select = c(date, hits))
dados %<>% as_tibble() %>%
left_join(x = .,
y = datasus %>%
mutate(date = Ano %>% ymd(truncated = 2)),
by = "date")
colnames(dados) <- c("date", "hits", "ano", "txi")
dados %<>% select(-ano)
dados %<>% xts(dados[, -1], order.by = dados[, 1] %>% pull)
dygraph(dados[, -1]) %>%
dyAxis("y", label = "Hits", valueRange = c(0, 100),
independentTicks = TRUE) %>%
dyAxis("y2", label = "Taxa de incidência", valueRange = c(0, 600),
independentTicks = TRUE) %>%
dySeries("hits",  axis = ("y"), fillGraph = TRUE) %>%
dySeries("txi",  axis = ("y2"), pointSize = 3) %>%
dyRangeSelector(height = 15) %>%
dyOptions(connectSeparatedPoints = TRUE)
dyOptions
?dyOptions
setwd("~/GitHub/Kaggle/Titanic")
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(magrittr)
train <-
read.csv("C:/Users/Thiago/Documents/.kaggle/competitions/titanic/train.csv",
stringsAsFactors = FALSE) %>%
as_tibble()
save.image("~/GitHub/Kaggle/Titanic/Titanic.RData")
train
train %<>%
mutate(Survived = factor(x = Survived, labels = c("no", "yes")),
Pclass = factor(x = Pclass, labels = c("1st", "2nd", "3rd")),
Sex = factor(x = Sex))
save.image("~/GitHub/Kaggle/Titanic/Titanic.RData")
model <-
glm(Survived ~ Pclass*Sex, family = binomial, data = train)
model %>%
summary() %$% coefficients %>%
kable(caption = "Estimativas do modelo")
require(knitr)
model <-
glm(Survived ~ Pclass*Sex, family = binomial, data = train)
model %>%
summary() %$% coefficients %>%
kable(caption = "Estimativas do modelo")
exp(2.095)
model %>%
summary() %$% coefficients %>%
kable(caption = "Estimativas do modelo")
load("~/GitHub/Kaggle/Titanic/Titanic.RData")
model <-
glm(Survived ~ Pclass*Sex, family = binomial, data = train)
model
model %>%
predict(newdata = expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female")))
require(magrittr)
model %>%
predict(newdata = expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female")))
model %>%
predict(newdata = expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female")),
type = "response")
expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female"))
expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female"))
model %>%
predict(newdata = expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female")), type = "response")
newdata <-
expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female"))
model %>%
predict(newdata = newdata, type = "response")
require(dplyr)
newdata <-
expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female")) %>%
as_tibble() %>%
mutate(pihat <- model %>% predict(newdata = newdata, type = "response"))
newdata
require(ggplot2)
newdata <-
expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female")) %>%
as_tibble() %>%
mutate(pihat = model %>% predict(newdata = newdata, type = "response"))
newdata
newdata <-
expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female")) %>%
as_tibble() %>%
mutate(Pihat = model %>% predict(newdata = newdata, type = "response"))
newdata
newdata %>%
ggplot(aes(Pihat, Pclass, colour = Sex)) + geom_line()
newdata %>%
ggplot(aes(Pclass, Pihat, colour = Sex)) + geom_line()
newdata %>%
ggplot(aes(Pclass, Pihat)) + geom_line()
newdata %>%
ggplot(aes(Pclass, Pihat)) + geom_points()
newdata %>%
ggplot(aes(Pclass, Pihat)) + geom_point()
newdata %>%
ggplot(aes(Pclass, Pihat, group = Sex)) + geom_point()
newdata %>%
ggplot(aes(Pclass, Pihat, group = Sex, colour = Sex)) + geom_point()
newdata %>%
ggplot(aes(Pclass, Pihat, group = Sex, colour = Sex)) + geom_line()
newdata <-
expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female")) %>%
as_tibble() %>%
mutate(Pihat = model %>% predict(newdata = newdata, type = "response"))
newdata %>%
ggplot(aes(Pclass, Pihat, group = Sex, colour = Sex)) + geom_line() +
labs(x = "Ticket Class", y = expression(\pi))
newdata <-
expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female")) %>%
as_tibble() %>%
mutate(Pihat = model %>% predict(newdata = newdata, type = "response"))
newdata %>%
ggplot(aes(Pclass, Pihat, group = Sex, colour = Sex)) + geom_line() +
labs(x = "Ticket Class", y = expression("\pi"))
newdata <-
expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female")) %>%
as_tibble() %>%
mutate(Pihat = model %>% predict(newdata = newdata, type = "response"))
newdata %>%
ggplot(aes(Pclass, Pihat, group = Sex, colour = Sex)) + geom_line() +
labs(x = "Ticket Class", y = expression(pi))
newdata <-
expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female")) %>%
as_tibble() %>%
mutate(Pihat = model %>% predict(newdata = newdata, type = "response"))
newdata %>%
ggplot(aes(Pclass, Pihat, group = Sex, colour = Sex)) + geom_line() +
labs(x = "Ticket Class", y = expression(pi(Survived)))
newdata <-
expand.grid(Pclass = c("1st", "2nd", "3rd"),
Sex = c("male", "female")) %>%
as_tibble() %>%
mutate(Pihat = model %>% predict(newdata = newdata, type = "response"))
newdata %>%
ggplot(aes(Pclass, Pihat, group = Sex, colour = Sex)) + geom_line() +
labs(x = "Ticket Class", y = expression(pi(Survived == Yes)))
newdata %>%
ggplot(aes(Pclass, Pihat, group = Sex, colour = Sex)) + geom_smooth() +
labs(x = "Ticket Class", y = expression(pi(Survived == Yes)))
newdata %>%
ggplot(aes(Pclass, Pihat, group = Sex, colour = Sex)) + geom_line() +
labs(x = "Ticket Class", y = expression(pi(Survived == Yes)))
newdata %>%
ggplot(aes(Pclass, Pihat, group = Sex, colour = Sex)) + geom_line() + geom_point() +
labs(x = "Ticket Class", y = expression(pi(Survived == Yes)))
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
newdata %>%
ggplot(aes(Sex, Pihat, group = Pclass, colour = Pclass)) + geom_line() + geom_point() +
labs(x = "Ticket Class", y = expression(pi(Survived == Yes)))
newdata %>%
ggplot(aes(Sex, Pihat, group = Pclass, colour = Pclass)) + geom_line() + geom_point() +
labs(x = "Sex", y = expression(pi(Survived == Yes)), colour = "Ticket Class")
require(captioner)
require(captioner)
install.packages("captioner")
?ggtitle
load("~/GitHub/Kaggle/Titanic/Titanic.RData")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
require(dplyr)
require(magrittr)
require(captioner)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
require(magrittr)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
require(dplyr)
require(magrittr)
require(captioner)
fig_nums <- captioner(prefix = "Figura")
table_nums <- captioner(prefix = "Tabela")
train <-
read.csv("C:/Users/Thiago/Documents/.kaggle/competitions/titanic/train.csv",
stringsAsFactors = FALSE) %>% as_tibble()
train %<>%
mutate(Survived = factor(x = Survived, labels = c("no", "yes")),
Pclass = factor(x = Pclass, labels = c("1st", "2nd", "3rd")),
Sex = factor(x = Sex))
train
train %>%
ggplot(aes(Survived, Age)) + geom_boxplot()
require(ggplot2)
train %>%
ggplot(aes(Survived, Age)) + geom_boxplot()
train %>%
ggplot(aes(Survived, Age)) + geom_boxplot() +
ggtitle(cat(fig_nums("age", "Distribuição da idade segundo status de sobrevivência")))
model <-
glm(Survived ~ Age, family = binomial, data = train)
model %>%
summary() %$% coefficients %>%
kable(caption = cat(table_nums("age", "Estimativas do modelo")))
require(knitr)
model <-
glm(Survived ~ Age, family = binomial, data = train)
model %>%
summary() %$% coefficients %>%
kable(caption = cat(table_nums("age", "Estimativas do modelo")))
model <-
glm(Survived ~ Pclass*Age, family = binomial, data = train)
model %>%
summary() %$% coefficients %>%
kable(caption = cat(table_nums("pclass_age", "Estimativas do modelo")))
require(ggplot2)
train %>% count(Pclass, Survived) %>%
group_by(Pclass) %>%
mutate(total = sum(n)) %>%
ggplot(aes(Pclass, n * 100/total, fill = Survived)) + geom_col() +
labs(x = "Ticket class", y = "%", fill = "Survived") +
ggtitle(cat(fig_nums("pclass", "Percentual distribution of survivors according to ticket class")))
require(knitr)
model <-
glm(Survived ~ Pclass, family = binomial, data = train)
model %>%
summary() %$% coefficients %>%
kable(caption = cat(table_nums("pclass", "Model estimation")))
exp(-1.67039)
1 - exp(-1.67039)
(1 - exp(-1.67039))*100
model <-
glm(Survived ~ Sex, family = binomial, data = train)
model %>%
summary() %$% coefficients %>%
kable(caption = cat(table_nums("sex", "Estimativas do modelo")))
exp(-0.0109635)
1 - exp(-0.0109635)
install.packages("plotly")
install.packages("plotly")
require(plotly)
train %>% count(Pclass, Survived) %>% group_by(Pclass) %>% mutate(total = sum(n)) %>% ggplot(aes(Pclass, n * 100/total, fill = Survived)) + geom_col() + labs(x = "Ticket class", y = "%", fill = "Survived") + ggtitle(cat(fig_nums("pclass", "Percentual distribution of survivors according to ticket class"))) %>% ggplotly()
train %>% count(Pclass, Survived) %>% group_by(Pclass) %>% mutate(total = sum(n)) %>% ggplot(aes(Pclass, n * 100/total, fill = Survived)) + geom_col() + labs(x = "Ticket class", y = "%", fill = "Survived") + ggtitle(cat(fig_nums("pclass", "Percentual distribution of survivors according to ticket class")))
ggplotly()
train %>% count(Pclass, Survived) %>% group_by(Pclass) %>% mutate(total = sum(n)) %>% ggplot(aes(Pclass, n * 100/total, fill = Survived)) + geom_col() + labs(x = "Ticket class", y = "%", fill = "Survived") + ggtitle(cat(fig_nums("pclass", "Percentual distribution of survivors according to ticket class")))
ggplotly()
p <- train %>% count(Pclass, Survived) %>% group_by(Pclass) %>% mutate(total = sum(n)) %>% ggplot(aes(Pclass, n * 100/total, fill = Survived)) + geom_col() + labs(x = "Ticket class", y = "%", fill = "Survived") + ggtitle(cat(fig_nums("pclass", "Percentual distribution of survivors according to ticket class")))
ggplotly(p)
p <- train %>% count(Pclass, Survived) %>% group_by(Pclass) %>% mutate(total = sum(n)) %>% ggplot(aes(Pclass, n * 100/total, fill = Survived)) + geom_col() + labs(x = "Ticket class", y = "%", fill = "") + ggtitle(cat(fig_nums("pclass", "Percentual distribution of survivors according to ticket class")))
ggplotly(p)
require(plotly)
