legend(7.8, 1, c("lwd = 2", "lwd = 4"),
col = c("blue", "red"), lwd = c(2, 4))
f <- function(x) (x - 3)*(x - 2)
curve(f, -2, 4, col = "blue")
f <- function(x) (x - 3)*(x - 2)
curve(f, -2, 4, col = "blue", axes = FALSE)
axis(1, pos = 0)
axis(2, las = 1, pos = 0, at = c(-Inf, seq(5, 20, 5)))
points(c(2, 3), c(0, 0), col = "blue", pch = 19)
f <- function(x) exp(x)
g <- function(x) -x^2 + 10
curve(f, -4, 3, col = "blue", axes = FALSE, lwd = 3,
panel.first = {grid(lty = 1)}, ylab = "y")
curve(g, col = "tomato", add = TRUE, lwd = 3)
axis(1, pos = 0)
axis(2, las = 1, pos = 0, at = c(-Inf, seq(5, 20, 5)))
legend(-4, 20, c("f", "g"), col = c("blue", "tomato"), lwd = 3)
f <- function(x) 10 + 1/x
curve(f, -1, 1, col = "blue", axes = FALSE, lwd = 3)
axis(1, pos = 0, at = c(-1, -.5, .5, 1))
axis(2, las = 1, pos = 0)
abline(h = 10, lty = 2, col = "tomato", lwd = 3) # adicionando uma linha vertical
set.seed(35)
x <- rnorm(100)
hist(x, main = "Histograma", col = "red", border = FALSE)
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
pie(x, labels, border = FALSE)
library(titanic)
titanic_train %>%
glimpse() # informações sobre o banco de dados
library(ggplot2)
titanic_train %>%
ggplot(aes(Survived)) + geom_bar()
titanic_train %>%
ggplot(aes(as.factor(Survived),
(..count../sum(..count..)))) + # neste argumento se calcula a proporção
geom_bar() +
scale_x_discrete(labels = c("Não", "Sim")) + # define as categorias no eixo x
scale_y_continuous(labels = scales::percent) + # apresenta o eixo y em percentual
labs(x = "Sobrevivente", y = "Percentual") # rótulo dos eixos x e y
titanic_train %>%
ggplot(aes(as.factor(Survived), (..count../sum(..count..)))) +
geom_bar(fill = "#b30000", alpha = .6) + # altera a cor e opacidade
scale_x_discrete(labels = c("Não", "Sim")) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Sobrevivente", y = "Percentual") +
theme_minimal() # mudança de tema
titanic_train %>%
ggplot(aes(as.factor(Survived), (..count../sum(..count..)),
fill = Sex)) + # preenchimento da barra segundo sexo
geom_bar(alpha = .8, position = "fill") + # position = "fill" a barra é empilhada preenchendo 100%
scale_x_discrete(labels = c("Não", "Sim")) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Sobrevivente", y = "Percentual", fill = "Sexo") + # o argumento 'fill' altera o título da legenda
theme_minimal()
titanic_train %>%
ggplot(aes(as.factor(Survived), (..count../sum(..count..)),
fill = Sex)) + # preenchimento da barra segundo sexo
geom_bar(alpha = .8, position = "fill") + # position = "fill" a barra é empilhada preenchendo 100%
scale_x_discrete(labels = c("Não", "Sim")) +
scale_y_continuous(labels = scales::percent) +
scale_fill_brewer("Sexo", palette = "Greens") + # alterar as cores
labs(x = "Sobrevivente", y = "Percentual", fill = "Sexo") + # o argumento 'fill' altera o título da legenda
theme_minimal()
titanic_train %>%
ggplot(aes(as.factor(Survived), (..count../sum(..count..)),
fill = Sex)) + # preenchimento da barra segundo sexo
geom_bar(alpha = .8, position = "fill") + # position = "fill" a barra é empilhada preenchendo 100%
scale_x_discrete(labels = c("Não", "Sim")) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual("Sexo", values = c("female" = "black", "male" = "orange")) + # alterar as cores
labs(x = "Sobrevivente", y = "Percentual") + # o argumento 'fill' altera o título da legenda
theme_minimal()
titanic_train %>%
ggplot(aes(as.factor(Survived), (..count../sum(..count..)),
fill = Sex)) +
geom_bar(alpha = .8, position = "fill") +
facet_grid(~ Pclass) + # introdução de uma terceira variável na análise
scale_x_discrete(labels = c("Não", "Sim")) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual("Sexo", values = c("female" = "black", "male" = "orange")) + # alterar as cores
labs(x = "Sobrevivente", y = "Percentual", fill = "Sexo") +
theme_light() # seleção de um outro tema
titanic_train %>%
ggplot(aes(y = Age)) + geom_boxplot() # é necessário definir o y
titanic_train %>%
ggplot(aes(as.factor(Survived), Age)) + geom_boxplot() + # distribuição da variável y segundo a variável x
scale_x_discrete(labels = c("Não", "Sim")) +
labs(x = "Sobrevivente", y = "Idade")
titanic_train %>%
ggplot(aes(as.factor(Survived), Age, fill = Sex)) + geom_boxplot() +
scale_x_discrete(labels = c("Não", "Sim")) +
labs(x = "Sobrevivente", y = "Idade", fill = "Sexo")
titanic_train %>%
ggplot(aes(as.factor(Survived), Age)) + geom_boxplot() +
facet_grid(. ~ Sex) +
scale_x_discrete(labels = c("Não", "Sim")) +
labs(x = "Sobrevivente", y = "Idade")
titanic_train %>%
ggplot(aes(as.factor(Survived), Age, fill = Sex)) + geom_boxplot() +
facet_grid(. ~ Pclass) +
scale_x_discrete(labels = c("Não", "Sim")) +
labs(x = "Sobrevivente", y = "Idade", fill = "Sexo")
library(gtrendsR)
dengue <- gtrends("dengue", geo = "BR", time = "2018-01-01 2018-12-15")
dengue$interest_over_time %>%
glimpse()
dengue$interest_over_time %>%
ggplot(aes(date, hits)) + geom_line()
times <- gtrends(c("Palmeiras", "Flamengo"), geo = "BR", time = "2018-04-14 2018-12-02")
times$interest_over_time %>%
glimpse()
times$interest_over_time %>%
ggplot(aes(date, hits, colour = keyword)) + geom_line()
(g1 <- times$interest_over_time %>%
mutate(semanas = week(date)) %>% # criando a variável semana
group_by(semanas, keyword) %>% # agregando segundo semanas e times
summarise(hits = mean(hits)) %>% # agregando com a média
ggplot(aes(semanas, hits, colour = keyword)) + geom_line(size = 1) +
scale_color_brewer("Times", palette = "Dark2") +
labs(x = "Semanas", y = "Hits"))
g1 + geom_rect(aes(xmin = week("2018-06-14"), # início do período
xmax = week("2018-07-15"), # fim do período
ymin = -Inf, ymax = Inf),
fill = "#b3ff99", colour = "#ffffff", alpha = .006) +
geom_text(aes(26, 20, label = "Copa do mundo"), # texto inserido
angle = 90, show_guide  = FALSE)
titanic_train %>%
group_by(Survived) %>%
summarise(n = n()) %>%
mutate(perc = n/sum(n) * 100) %>%
ggplot(aes(x = as.factor(Survived), y = perc)) + geom_col() +
geom_text(aes(label = perc %>% round(1)),
vjust = 1.5, color = "white", size = 10) # vjust altera a posição vertical do texto
related
library(wordcloud)
library(gtrendsR)
library(magrittr)
library(RColorBrewer)
dengue <- gtrends("dengue", geo = "BR", time = "2018-01-01 2018-12-15")
related <- dengue$related_queries %>%
filter(related_queries == "top") %>%
select(subject, value) %>%
mutate(value = iconv(value, from = "utf-8", to = "iso8859-1"))
related
cidades <- gtrends(c("Rio de Janeiro", "São Paulo"), geo = "BR", time = "2018-01-01 2018-12-15")
related <- dengue$related_queries %>%
filter(related_queries == "top") %>%
select(subject, value) %>%
mutate(value = iconv(value, from = "utf-8", to = "iso8859-1"))
related
cidades <- gtrends(c("Rio de Janeiro", "São Paulo"), geo = "BR", time = "2018-01-01 2018-12-15")
cidades <- gtrends(c("Rio de Janeiro", "São Paulo"), geo = "BR", time = "2018-01-01 2018-12-15")
related2 <- cidades$related_queries %>%
filter(related_queries == "top") %>%
select(subject, value) %>%
mutate(value = iconv(value, from = "utf-8", to = "iso8859-1"))
related2
empresas <- gtrends(c("Microsoft", "Google"), time = "2019-01-01 2019-05-27")
related <- empresas$related_queries %>%
filter(related_queries == "top") %>%
select(subject, value) %>%
mutate(value = iconv(value, from = "utf-8", to = "iso8859-1"))
related
empresas$related_queries %>%
filter(related_queries == "top")
empresas <- gtrends(c("Microsoft", "Google"), time = "2019-01-01 2019-05-27")
related <- empresas$related_queries %>%
filter(related_queries == "top") %>%
select(subject, value, keyword) %>%
mutate(value = iconv(value, from = "utf-8", to = "iso8859-1"))
related
require(ggwordcloud)
related %>%
ggplot +
aes(label = value, size = subject, colour = subject) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 18) +
theme_minimal() +
facet_wrap(~keyword)
related
related %>%
ggplot(aes(label = value, size = subject, colour = subject)) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 18) +
theme_minimal() +
facet_wrap(~keyword)
related
related %>% as_tibble()
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 18) +
theme_minimal() +
facet_wrap(~keyword)
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 10) +
theme_minimal() +
facet_wrap(~keyword)
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 12) +
theme_minimal() +
facet_wrap(~keyword)
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
theme_minimal() +
facet_wrap(~keyword)
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
scale_color_brewer(palette = "Greens") +
theme_minimal() +
facet_wrap(~keyword)
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
scale_color_brewer(palette = "Green") +
theme_minimal() +
facet_wrap(~keyword)
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
scale_color_brewer(palette = "Set2") +
theme_minimal() +
facet_wrap(~keyword)
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
theme_minimal() +
facet_wrap(~keyword)
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
theme_minimal() +
scale_color_gradient(low = "darkred", high = "red") +
facet_wrap(~keyword)
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
theme_minimal() +
scale_color_gradient(low = "gray", high = "green") +
facet_wrap(~keyword)
colours()
colours() %>% grep("green")
colours() %>% grep(".*green.*")
colours()
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
theme_minimal() +
scale_color_gradient(low = "gray", high = "darkgreen") +
facet_wrap(~keyword)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
theme_minimal() +
scale_color_gradient(low = "gray", high = "springgreen2") +
facet_wrap(~keyword)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
theme_minimal() +
scale_color_gradient(low = "gray", high = "springgreen1") +
facet_wrap(~keyword)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
theme_minimal() +
scale_color_gradient(low = "gray", high = "springgreen4") +
facet_wrap(~keyword)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
theme_minimal() +
scale_color_gradient(low = "gray", high = "springgreen3") +
facet_wrap(~keyword)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
theme_minimal() +
scale_color_gradient(low = "gray", high = "springgreen3") +
facet_wrap(~keyword)
ggplotly()
plotly::ggplotly()
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 14) +
theme_minimal() +
scale_color_gradient(low = "gray", high = "springgreen3") +
facet_wrap(~keyword)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 14) +
theme_minimal() +
scale_color_gradient(low = "gray", high = "springgreen3") +
facet_wrap(~keyword)
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 14) +
theme_minimal() +
scale_color_gradient(low = "gray", high = "springgreen3") +
facet_wrap(~keyword)
require(ggwordcloud)
related %>%
ggplot(aes(label = value, size = subject %>% as.numeric(), colour = subject %>% as.numeric())) +
geom_text_wordcloud_area(shape = "square") +
scale_size_area(max_size = 13) +
theme_minimal() +
scale_color_gradient(low = "gray", high = "springgreen3") +
facet_wrap(~keyword)
require(leaflet)
require(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng = -22.9060598, lat = -43.1790855, popup = "Instituto Infnet")
m
require(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng = -43.1790855, lat = -22.9060598, popup = "Instituto Infnet")
m
require(leaflet)
leaflet() %>%
addTiles() %>%  # layout da malha
addMarkers(lng = -43.1790855, lat = -22.9060598, popup = "Instituto Infnet")
require(leaflet)
leaflet() %>%
addTiles() %>%  # layout da malha
addMarkers(lng = -43.1790855, lat = -22.9060598, popup = "Instituto Infnet")
RColorBrewer::display.brewer.all(colorblindFriendly = TRUE)
shape <- readOGR("./data/BRUFE250GC_SIR/", "BRUFE250GC_SIR",
verbose = FALSE,
stringsAsFactors = FALSE,
encoding = "utf-8",
use_iconv = TRUE)
require(rgdal)
shape <- readOGR("./data/BRUFE250GC_SIR/", "BRUFE250GC_SIR",
verbose = FALSE,
stringsAsFactors = FALSE,
encoding = "utf-8",
use_iconv = TRUE)
shape <- readOGR("./data/BRUFE250GC_SIR", "BRUFE250GC_SIR",
verbose = FALSE,
stringsAsFactors = FALSE,
encoding = "utf-8",
use_iconv = TRUE)
plot(shape)
shape@data
set.seed(1057)
dados <- tibble(uf = c("RS", "SC", "PR", "SP", "MG", "RJ", "ES", "BA", "SE",
"PE", "PB", "RN", "AL", "CE", "PI", "MA", "PA", "AM",
"AP", "RO", "RR", "AC", "MT", "MS", "DF", "GO", "TO"),
CD_GEOCUF = c(43, 42, 41, 35, 31, 33, 32, 29, 28,
26, 25, 24, 27, 23, 22, 21, 15, 13,
16, 11, 14, 12, 51, 50, 53, 52, 17),
y = rnorm(27))
require(dplyr)
dados <- tibble(uf = c("RS", "SC", "PR", "SP", "MG", "RJ", "ES", "BA", "SE",
"PE", "PB", "RN", "AL", "CE", "PI", "MA", "PA", "AM",
"AP", "RO", "RR", "AC", "MT", "MS", "DF", "GO", "TO"),
CD_GEOCUF = c(43, 42, 41, 35, 31, 33, 32, 29, 28,
26, 25, 24, 27, 23, 22, 21, 15, 13,
16, 11, 14, 12, 51, 50, 53, 52, 17),
y = rnorm(27))
set.seed(1057)
dados <- tibble(uf = c("RS", "SC", "PR", "SP", "MG", "RJ", "ES", "BA", "SE",
"PE", "PB", "RN", "AL", "CE", "PI", "MA", "PA", "AM",
"AP", "RO", "RR", "AC", "MT", "MS", "DF", "GO", "TO"),
CD_GEOCUF = c(43, 42, 41, 35, 31, 33, 32, 29, 28,
26, 25, 24, 27, 23, 22, 21, 15, 13,
16, 11, 14, 12, 51, 50, 53, 52, 17),
y = rnorm(27))
dados
shape@data %>% as_tibble()
shape@data %<>% left_join(dados, by = "CD_GEOCUF")
require(magrittr)
shape@data %<>% left_join(dados, by = "CD_GEOCUF")
shape@data %<>% left_join(dados, by = "CD_GEOCUF")
dados <- tibble(CD_GEOCUF = c(43, 42, 41, 35, 31, 33, 32, 29, 28,
26, 25, 24, 27, 23, 22, 21, 15, 13,
16, 11, 14, 12, 51, 50, 53, 52, 17),
y = rnorm(27)) %>%
mutate(CD_GEOCUF = CD_GEOCUF %>% as.character())
shape@data %<>% left_join(dados, by = "CD_GEOCUF")
shape@data
shape <- readOGR("./data/BRUFE250GC_SIR", "BRUFE250GC_SIR",
verbose = FALSE,
stringsAsFactors = FALSE,
encoding = "utf-8",
use_iconv = TRUE)
sp
shape %>% spplot("y")
require(spplot)
require(sp)
shape %>% spplot("y")
spplot(shape, "y")
spplot(shape, zcol = "y")
shape
shape@data
set.seed(1057)
dados <- tibble(CD_GEOCUF = c(43, 42, 41, 35, 31, 33, 32, 29, 28,
26, 25, 24, 27, 23, 22, 21, 15, 13,
16, 11, 14, 12, 51, 50, 53, 52, 17),
y = rnorm(27)) %>%
mutate(CD_GEOCUF = CD_GEOCUF %>% as.character())
shape@data %<>% left_join(dados, by = "CD_GEOCUF")
shape %>% spplot("y")
shape %>% spplot("y",
col.regions = brewer.pal(n = 5, name = "OrRd"))
require(RColorBrewer)
shape %>% spplot("y",
col.regions = brewer.pal(n = 5, name = "OrRd"))
dados <- tibble(CD_GEOCUF = c(43, 42, 41, 35, 31, 33, 32, 29, 28,
26, 25, 24, 27, 23, 22, 21, 15, 13,
16, 11, 14, 12, 51, 50, 53, 52, 17),
y = rnorm(27)) %>%
mutate(CD_GEOCUF = CD_GEOCUF %>% as.character(),
y = cut(y, 4))
dados
shape <- readOGR("./data/BRUFE250GC_SIR", "BRUFE250GC_SIR",
verbose = FALSE,
stringsAsFactors = FALSE,
encoding = "utf-8",
use_iconv = TRUE)
dados <- tibble(CD_GEOCUF = c(43, 42, 41, 35, 31, 33, 32, 29, 28,
26, 25, 24, 27, 23, 22, 21, 15, 13,
16, 11, 14, 12, 51, 50, 53, 52, 17),
y = rnorm(27)) %>%
mutate(CD_GEOCUF = CD_GEOCUF %>% as.character(),
y = cut(y, 4))
shape@data %<>% left_join(dados, by = "CD_GEOCUF")
shape %>% spplot("y",
col.regions = brewer.pal(n = 4, name = "OrRd"))
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
require(rgdal)
require(sp)
require(RColorBrewer)
require(dplyr)
require(magrittr)
shape <- readOGR("./data/BRUFE250GC_SIR", "BRUFE250GC_SIR",
verbose = FALSE,
stringsAsFactors = FALSE,
encoding = "utf-8",
use_iconv = TRUE)
shape@data %>% as_tibble()
plot(shape)
set.seed(1057)
dados <- tibble(CD_GEOCUF = c(43, 42, 41, 35, 31, 33, 32, 29, 28,
26, 25, 24, 27, 23, 22, 21, 15, 13,
16, 11, 14, 12, 51, 50, 53, 52, 17),
y = rnorm(27)) %>%
mutate(CD_GEOCUF = CD_GEOCUF %>% as.character(),
y = cut(y, 4))
shape@data %<>% left_join(dados, by = "CD_GEOCUF")
shape@data %>% as_tibble()
shape %>% spplot(zcol = "y",
col.regions = brewer.pal(n = 4, name = "OrRd"),
col = "transparent",
par.settings = list(axis.line = list(col = 'transparent')))
shape %>% spplot(zcol = "y",
col.regions = brewer.pal(n = 4, name = "OrRd"),
col = "gray",
par.settings = list(axis.line = list(col = 'transparent')))
warnings()
warning()
knitr::opts_chunk$set(message = FALSE, warning = FALSE, fig.align = "center")
library(plotly)
library(glue)
library(shiny)
g2 <- titanic_train %>%
group_by(Survived, Sex) %>% summarise(n = n()) %>%
group_by(Survived) %>% mutate(perc = n/sum(n)) %>%
ggplot(aes(as.factor(Survived), weight = perc, fill = Sex,
text = glue("{Sex} <br> {(perc * 100) %>% round(2)}%"))) +
geom_bar(alpha = .6, position = "fill") +
scale_x_discrete(labels = c("Não", "Sim")) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Sobrevivente", y = "Percentual", fill = "") + theme_minimal()
